type Count @entity {
  id: ID!
  orderTotal: Int!
  orderSW: Int!
  orderGF: Int!
  orderBP: Int!
  nftTotal: Int!
  swTotal: Int!
  gfTotal: Int!
  bpTotal: Int!
  salesTotal: Int!
}

enum NFTType @entity{
  card
  fragment
}

enum OrderStatus @entity {
  open
  sold
  cancelled
}

enum Tribe @entity {
  solarian
  andromedian
  scultpian
  mercenary
}

enum FilterType @entity{
  genomic
  blueprint
  character
  attribute
}

enum NFTClass @entity{
  tanker
  nuker
  fighter
  supporter
  bionic
  kinetic
  electric
  radiation
  gravitation
}

enum Part @entity{
  gear
  drone
  suite
  bot
  weapon
}

enum Rarity @entity{
  common
  rare
  epic
  legendary
  limited
}

enum Camp @entity{
  venus
  titan
  europa
  earth
  mars
}

enum Fragment @entity{
  genomic
  blueprint
}
 
type Order @entity {
  id: ID!
  buyWithERC20Address: Bytes!
  nft: NFT
  nftAddress: Bytes!
  tokenId: BigInt!
  txHash: Bytes!
  owner: Bytes!
  buyer: Bytes
  price: BigInt!
  status: OrderStatus!
  blockNumber: BigInt!
  #expiresAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Account @entity {
  id: ID! # ETH addr
  address: Bytes!
  nfts: [NFT!] @derivedFrom(field: "owner")
}


type NFT @entity {
  id: ID!
  partCode: String! 
  tokenId: BigInt!
  contractAddress: Bytes!
  owner: Account!
  tokenURI: String!
  nftType: NFTType!
  level: BigInt
  nftClass: NFTClass
  part: Part
  rarity: Rarity
  camp: Camp
  fragment: Fragment
  tribe: Tribe
 

  orders: [Order!] @derivedFrom(field: "nft") # History of all orders. Should only ever be ONE open order. all others must be cancelled or sold
  activeOrder: Order

  name: String
  image: String!

  createdAt: BigInt!
  updatedAt: BigInt!

  codeGear: String
  codeDrone: String
  codeSuite: String
  codeBot: String
  codeWeapon: String
  codeGenome: String

  # search indexes
  searchOrderStatus: OrderStatus
  searchOrderPrice: BigInt
  searchOrderExpiresAt: BigInt
  searchOrderCreatedAt: BigInt
  searchText: String
}


#https://github.com/decentraland/marketplace/blob/master/indexer/schema.graphql